name: CI - lint, test, build, and publish

on:
  push:
    branches: [ build ]
  pull_request:
    branches: [ build ]

jobs:
  pinned-check:
    name: Check pinned requirements
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install pip-tools
        run: python -m pip install --upgrade pip pip-tools

      - name: Check requirements.in matches pinned requirements.txt
        run: |
          # Generate requirements.in from pyproject.toml then check pinned file
          python scripts/sync_reqs_from_pyproject.py
          python -m pip install --upgrade pip pip-tools
          python -m piptools compile --output-file=requirements.txt --check requirements.in

  lint:
    name: Lint (dev tools)
    runs-on: ubuntu-latest
    needs: pinned-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dev requirements
        run: python -m pip install --upgrade pip && python -m pip install -r requirements-dev.txt

      - name: Run ruff
        run: python -m ruff check . || true

      - name: Run pylint (report only)
        run: python -m pylint src || true

      - name: Run yamllint (config default)
        run: python -m yamllint . || true

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: [pinned-check, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install runtime and dev deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt

      - name: Run tests
        run: python -m pytest -q

  build:
    name: Build wheel and upload artifact
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install build deps
        run: python -m pip install --upgrade pip build

      - name: Build wheel
        run: python -m build --wheel --no-isolation

      - name: Upload artifact (wheel)
        uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: dist/*.whl

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/build' && (secrets.PYPI_API_TOKEN != '')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install build and twine
        run: python -m pip install --upgrade pip build twine

      - name: Build for publish
        run: python -m build --wheel --no-isolation

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*.whl

*** End of workflow
